basePath: /
definitions:
  api.ApiResponse:
    properties:
      data: {}
    type: object
  api.ValidationError:
    properties:
      error:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  paginate.Pagination:
    properties:
      items: {}
      limit:
        type: integer
      page:
        type: integer
      sort:
        example: id desc
        type: string
      total_pages:
        type: integer
      total_rows:
        type: integer
    type: object
  types.CreateUserDTO:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - firstname
    - lastname
    - password
    - username
    type: object
  types.UpdateUserDTO:
    properties:
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  types.User:
    description: User account information
    properties:
      created_at:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server for using Swagger with Echo and gorm.
  title: Swagger Example API
  version: "1.0"
paths:
  /user:
    get:
      consumes:
      - '*/*'
      description: Get all users paginated
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/paginate.Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/types.User'
                  type: array
              type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get user by id
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Creates a user
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/types.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ValidationError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/types.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ValidationError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Update user
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - '*/*'
      description: Get the user by given id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/types.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ValidationError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: "Get \tGet user by id"
      tags:
      - User
swagger: "2.0"
